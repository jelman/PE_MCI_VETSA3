# Import libraries
library(dplyr)
#----------------------------------------------------------------------------#
#                     Define functions                                       #
#----------------------------------------------------------------------------#
adjustDataset = function(regVars,adjVars,nDemoVars,data){
#######################################################################
# Adjust dataset for specified set of variables.Regresses passed      #
# variables from each measure using linear regression. The intercept  #
# is added back in to retain mean level information.                  #
# Input:                                                              #
# regVars = List of variables to regress out                          #
# adjVars = List of variables to be adjusted                          #
# nDemoVars = Number of demographic variables included in dataframe.  #
#             These should be the first 1:nDemoVars columns of        #
#             the dataframe                                           #
#######################################################################
# Read variable names from data and store in a vector
allNames <- names(data)
#*** Check variables are correct
nVars <- length(adjVars)
### Creating Storate Data Frame ###
# Set number of individuals
n <- dim(data)[1]
tot <- dim(data)[2]
# Create Data Frame
data <- cbind(data,matrix(NA,nrow=n,ncol=nVars))
names(data) <- c(allNames,paste(adjVars,"_adj",sep=""))
### Running Loop Using lapply ###
# fitting models
models <- lapply(adjVars, function(x) {
fmla = as.formula(paste0(x," ~ ",regVars))
lm(formula=fmla, data = data, na.action=na.exclude)
})
# storing residuals from each model into data frame
for(v in 1:nVars){
data[,tot+v] <- residuals(models[[v]]) + coef(models[[v]])[[1]]
}
#dataR is now your residualized parameters
dataR <- data[,c(1:nDemoVars,(tot+1):(tot+nVars))]
dataR
}
calcPracticeEffect = function(dat, varName, idxLong, idxAR, idxT1){
#################################################################################################
# The difference (D) between time 2 scores of longitudinal returnees (S1T2) and time 2          #
# attrition replacements (S2T2) is the sum of attrition effects (A) and practice effects (P).   #
# The attrition effect is calculated as the difference in time 1 scores of returnees (S1T1ret)  #
# compared to the entire group (S1T1all). The practice effect is therefore the difference D     #
# minus the attrition effect.                                                                   #
#                                                                                               #
# Input:                                                                                        #
# dat = Dataframe with all variables standardized to time 1 mean and SD                         #
# varName = Variable (without "_V2" suffix) to calculate practice effects for                   #
# idxLong = Indices of longitudinal subjects                                                    #
# idxAR = Indices of attrition replacement subjects                                             #
# idxT1 = Indices of all valid subjects at time 1                                               #
#################################################################################################
varV1 = varName
varV2 = paste0(varV1, "_V2")
varV1 = paste0(varV1,"_adj")
varV2 = paste0(varV2,"_adj")
# Longitudinal Subjects Time 2
S1T2 = mean(dat[idxLong, varV2], na.rm=T)
# Attrition Replacement Subjects Time 2
S2T2 = mean(dat[idxAR, varV2], na.rm=T)
# Longitudinal Returnees Time 1
S1T1ret = mean(dat[idxLong, varV1], na.rm=T)
# All Subjects Time 1
S1T1all = mean(dat[idxT1, varV1], na.rm=T)
# Difference score
D = S1T2 - S2T2
# Attrition effect
A = S1T1ret - S1T1all
# Practice Effect
P = D - A
P
}
#--------------------------------------------------------------------------------------#
#                     Load and merge data, and define variables to adjust              #
#--------------------------------------------------------------------------------------#
### Load Data ###
# Load imputed raw data from VETSA 1 and VETSA 2
dataV1V2 = read.csv('/home/jelman/netshare/M/PSYCH/KREMEN/VETSA DATA FILES_852014/Practice Effect MCI/Data/InitialData/V1V2_RawScores_July2016.csv',
stringsAsFactors = F)
names(dataV1V2) = toupper(names(dataV1V2))
str(dataV1V2)
### Define variable name vectors to adjust and calculated practive effects on ###
# Create vector of all raw variables to be adjusted for age 20 AFQT
rawVarsV1 = names(dataV1V2)[5:29]
rawVarsV2 = names(dataV1V2)[30:54]
# Create vector of variables to use for calculating practice effects
peVars = rawVarsV1
adjVars = c(rawVarsV1, rawVarsV2)
# Set number of demographic or other variables included at beginning of dataframe (these won't be adjusted)
nDemoVars = 4
# Specify nas201tran (Age 20 AFQT as variable to regress out)
regVars = paste("scale(nas201tran)", sep=" + ")
regVars = paste("scale(NAS201TRAN)", sep=" + ")
# Regress nas201tran out of dataset
nasAdjRawScoresData = adjustDataset(regVars, adjVars, nDemoVars, dataV1V2)
str(nasAdjRawScoresData)
# Save out nas201tran adjusted dataset
write.csv(nasAdjRawScoresData, '/home/jelman/netshare/M/PSYCH/KREMEN/VETSA DATA FILES_852014/Practice Effect MCI/Data/V1V2_NasAdjScores_July2016.csv',
row.names = F)
nasAdjRawScoresData$VETSAGRP
idxLong = which(nasAdjRawScoresData$VETSAGRP=="vetsa2")
idxAR = which(nasAdjRawScoresData$VETSAGRP=="vetsa2_ar")
idxT1 = which(nasAdjRawScoresData$VETSAGRP=="vetsa2" | nasAdjRawScoresData$VETSAGRP=="VETSA1" | nasAdjRawScoresData$VETSAGRP=="vetsa2_ar")
# Calculate practice effects for all tests
pracEffects = sapply(peVars, function(x) calcPracticeEffect(nasAdjRawScoresData, x, idxLong, idxAR, idxT1))
pracEffects
summary(nasAdjRawScoresData)
pracEffects
data.frame(pracEffects)
write.csv(data.frame(pracEffects), "/home/jelman/netshare/M/PSYCH/KREMEN/VETSA DATA FILES_852014/Practice Effect MCI/Data/PracticeEffects_NasAdjScores.csv",
row.names = T)
sd(nasAdjRawScoresData, na.rm=T)
psych::describe(nasAdjRawScoresData, fast=T)
psych::describe(nasAdjRawScoresData, fast=T)[4]
cbind(pracEffects, psych::describe(nasAdjRawScoresData, fast=T)[4])
psych::describe(nasAdjRawScoresData, fast=T)[4]
pracEffects
?lme4:lmer
?lme4::lmer
